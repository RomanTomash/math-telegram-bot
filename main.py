import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–∞–Ω–µ–ª–∏
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_IDS = os.getenv('ADMIN_IDS')

print("=== BOT STARTING ===")
print(f"BOT_TOKEN from env: {'‚úÖ SET' if BOT_TOKEN else '‚ùå NOT SET'}")
print(f"ADMIN_IDS from env: {ADMIN_IDS}")

if not BOT_TOKEN:
    print("‚ùå FATAL: BOT_TOKEN not in environment!")
    print("üí° Even though it's set in panel, it's not reaching the container")
    exit(1)

logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('üéâ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Amvera!')

try:
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    print("ü§ñ Bot starting polling...")
    application.run_polling()
except Exception as e:
    print(f"‚ùå Bot error: {e}")
    import traceback
    traceback.print_exc()
